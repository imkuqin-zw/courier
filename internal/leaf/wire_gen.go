// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package leaf

import (
	"dubbo.apache.org/dubbo-go/v3/common"
	"github.com/google/wire"
	"github.com/imkuqin-zw/courier/internal/leaf/repository"
	"github.com/imkuqin-zw/courier/internal/leaf/usecase"
	"github.com/imkuqin-zw/courier/pkg/gorm"
)

// Injectors from wire.go:

func NewSegmentProviderServices() []interface{} {
	db := gorm.New()
	segmentRepo := repository.NewSegmentRepo(db)
	segmentUC := usecase.NewSegmentUC(segmentRepo)
	v := newSegmentProvider(segmentUC)
	return v
}

func NewSnowflakeProviderServices() []interface{} {
	snowflakeUC := usecase.NewSnowflakeUC()
	v := newSnowflakeProvider(snowflakeUC)
	return v
}

func NewAllProviderServices() []interface{} {
	snowflakeUC := usecase.NewSnowflakeUC()
	db := gorm.New()
	segmentRepo := repository.NewSegmentRepo(db)
	segmentUC := usecase.NewSegmentUC(segmentRepo)
	v := newAllProvider(snowflakeUC, segmentUC)
	return v
}

// wire.go:

// ProviderSet is segment providers.
var providerSegmentSet = wire.NewSet(usecase.NewSegmentUC, repository.NewSegmentRepo, gorm.New)

func newSegmentProvider(
	segmentUC *usecase.SegmentUC,
) []common.RPCService {
	return []common.RPCService{
		segmentUC,
	}
}

// ProviderSet is snowflake providers.
var providerSnowflakeSet = wire.NewSet(usecase.NewSnowflakeUC)

func newSnowflakeProvider(
	snowFlakeUC *usecase.SnowflakeUC,
) []common.RPCService {
	return []common.RPCService{
		snowFlakeUC,
	}
}

// ProviderSet is all providers.
var providerAllSet = wire.NewSet(
	providerSnowflakeSet,
	providerSegmentSet,
)

func newAllProvider(
	snowFlakeUC *usecase.SnowflakeUC,
	segmentUC *usecase.SegmentUC,
) []common.RPCService {
	return []common.RPCService{
		snowFlakeUC,
		segmentUC,
	}
}
